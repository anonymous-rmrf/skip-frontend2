{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.24d36a4698f586db861f.hot-update.js","sources":["webpack:///./pages/dashboard/.products/.products/index.js"],"sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\n\r\nimport {\r\n  products,\r\n  addProduct,\r\n  deleteProduct,\r\n  updateProduct,\r\n  reviewPurchase,\r\n  inventoryStock,\r\n  taxes\r\n} from \"../../../../src/reduxHelper\"\r\nimport Products from \"../../../../src/components/organisms/items\"\r\nimport Loading from \"../../../../src/components/atoms/loading\"\r\nimport wrapper from \"./wrapper\"\r\nimport { itemData } from \"./product.data\"\r\nimport uuidv4 from \"uuid/v4\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      productsTableData: [],\r\n      filteredTableData: [],\r\n      cardData: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let businessID = this.props.business.response.data[0].businessID\r\n    this.props.getTaxes(businessID).then(_ => {\r\n      this.loadproductsData()\r\n    })\r\n    this.props.getInventoryStock(businessID).then(res => {\r\n      console.log(res)\r\n      this.setState({cardData: res})\r\n    })\r\n  }\r\n\r\n  handleCreateproducts(data, cb) {\r\n    data.values.productID = uuidv4()\r\n    data.values.business = this.props.business.response.data[0].businessID\r\n    this.props\r\n      .addProduct(data.values)\r\n      .then(res => {\r\n        this.loadproductsData()\r\n        cb({ status: true, message: \"products created successfully\" })\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n        cb({ status: false, message: \"SomeError occured\" })\r\n      })\r\n  }\r\n\r\n  handleSearch(e) {\r\n    const filteredEvents = this.state.productsTableData.filter(function(data) {\r\n      var pattern = new RegExp(e.target.value, \"i\")\r\n      return data.name.match(pattern)\r\n    })\r\n    this.setState({ filteredTableData: filteredEvents })\r\n  }\r\n\r\n  render() {\r\n    if (this.props.products.isLoaded) {\r\n      return (\r\n        <div>\r\n          <Products\r\n            formData={this.createSelectData(\r\n              this.props.productCategories.response.data\r\n            )}\r\n            rowSelection={{}}\r\n            pagination={{\r\n              pageSize: 10,\r\n              showLessItems: true,\r\n              showSizeChanger: true,\r\n              pageSizeOptions: [\"5\", \"10\", \"15\", \"20\"]\r\n            }}\r\n            cardData={this.state.cardData}\r\n            cascaderData={itemData.cascaderData}\r\n            columns={itemData.productColumns}\r\n            columnData={this.state.filteredTableData}\r\n            onCreate={(data, cb) => this.handleCreateproducts(data, cb)}\r\n            onSearch={value => this.handleSearch(value)}\r\n          />\r\n        </div>\r\n      )\r\n    } else {\r\n      return <Loading/>\r\n    }\r\n  }\r\n\r\n  _createproductsColumns(data) {\r\n    let temp = []\r\n    if (Array.isArray(data)) {\r\n      data.map(item => {\r\n        let object = {}\r\n        object.name = item.name\r\n        object.productID = item.productID\r\n        object.code = item.code\r\n        object.barcode = item.barcode\r\n        object.category = item.productcategory\r\n        object.location = item.location//map location here\r\n        object.price = item.price\r\n        object.prefilledValues = item\r\n        object.selectData = this.createSelectData(\r\n          this.props.productCategories.response.data\r\n        )\r\n        object.handleFeatures = {\r\n          handleDelete: urlParams => {\r\n            urlParams.businessID = this.props.business.response.data[0][0].businessID\r\n            console.log(\"here\", urlParams)\r\n            this.props\r\n              .deleteProduct(urlParams)\r\n              .then(res => {\r\n                this.loadproductsData()\r\n              })\r\n              .catch(err => {\r\n                console.log(err)\r\n              })\r\n          },\r\n          editProduct: (data, id, cb) => {\r\n            console.log(\"clicked\", data, id, cb)\r\n            this.props\r\n              .updateProduct(id, data.values)\r\n              .then(res => {\r\n                this.loadproductsData()\r\n                cb({ status: true, message: \"Product updated\" })\r\n              })\r\n              .catch(err => {\r\n                console.log(err)\r\n                cb({ status: false, message: \"Some Error while updating\" })\r\n              })\r\n          }\r\n        },\r\n        object.assign = {\r\n          handleAssign: (data, id, cb) => {\r\n            console.log(data, id, cb, \"received data\")\r\n          },\r\n          // assignedTaxes: attributesetID => this.props.assignedTaxes(attributesetID),\r\n          taxesData: this.createSelectTaxData(this.props.taxes.response.data),\r\n          productID: item.productID\r\n        }\r\n        temp.push(object)\r\n      })\r\n    }\r\n    return temp\r\n  }\r\n\r\n  loadproductsData() {\r\n    console.log(\"loading\")\r\n    let businessID = this.props.business.response.data[0].businessID\r\n    this.props\r\n      .getproducts(businessID)\r\n      .then(res => {\r\n        this.setState({ productsTableData: this._createproductsColumns(res) })\r\n        this.setState({ filteredTableData: this.state.productsTableData })\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n  createSelectData(data) {\r\n    let selectData = data.map(item => ({\r\n      name: item.name,\r\n      value: item.taxID\r\n    }))\r\n    return selectData\r\n  }\r\n\r\n  createSelectTaxData(data) {\r\n    let selectData = data.map(item => ({\r\n      name: item.name,\r\n      value: item.productcategoryID\r\n    }))\r\n    return selectData\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  // console.log(\"apnaaaaaaaa stateeeee\", state)\r\n  return {\r\n    business: state.businesses,\r\n    products: state.products,\r\n    taxcategories: state.taxcategories,\r\n    inventoryStock: state.inventoryStock,\r\n    taxes: state.taxes\r\n  }\r\n}\r\n\r\n// Example Syntax for writing dispatch\r\nconst mapDispatchToProps = dispatch => ({\r\n  getproducts: businessID => dispatch(products.action(businessID)),\r\n  getTaxes: (businessID) => dispatch(taxes.action(businessID)),\r\n  addProduct: (businessID, object) =>\r\n    dispatch(addProduct.action(businessID, object)),\r\n  getTaxeCategories: businessID =>\r\n    dispatch(getTaxeCategories.action(businessID)),\r\n  addTaxeCategories: (businessID, object) =>\r\n    dispatch(addTaxeCategories.action(businessID, object)),\r\n  deleteProduct: urlParams => dispatch(deleteProduct.action(urlParams)),\r\n  updateProduct: (productID, object) =>\r\n    dispatch(updateProduct.action(productID, object)),\r\n  reviewPurchase: () => dispatch(reviewPurchase.action()),\r\n  getInventoryStock: (businessID) => dispatch(inventoryStock.action(businessID))\r\n})\r\n\r\nexport default wrapper(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(App)\r\n)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAhBA;AAoBA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAzBA;AA4BA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;;;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;;;;AA7JA;AACA;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAbA;AAAA;AACA;AAeA;;;;A","sourceRoot":""}