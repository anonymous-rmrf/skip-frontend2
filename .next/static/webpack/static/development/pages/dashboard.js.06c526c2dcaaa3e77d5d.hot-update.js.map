{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.06c526c2dcaaa3e77d5d.hot-update.js","sources":["webpack:///./pages/dashboard/.home/index.js"],"sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport {\n  topItems,\n  topCategories,\n  paymentTypes,\n  topSalesman,\n  locationSales,\n  salesDatewise\n} from \"../../../src/reduxHelper\"\n\nconst ReactHighcharts = require('react-highcharts');\nimport { Row, Col, Card, Table, Divider, Tag, Descriptions } from 'antd';\nimport { businesses } from \"../../../src/api/business\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      topProductsData: [],\n      topCategoryData: [],\n      paymentTypeData: [],\n      topSalesmanData: [],\n      loacationSalesData: [],\n      grossSalesData: []\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.props.business.response.data[0].businessID, \"busuuu\")\n    this.loadTopItems()\n    this.loadTopCategory()\n    this.loadTransactionType()\n    this.loadTopSalesman()\n    this.loadLocationSales()\n    this.loadSalesWithinDates()\n  }\n\n\n\n\n  render() {\n    const columns = [\n      {\n        title: 'Top Selling Items',\n        dataIndex: 'productName',\n        key: 'name',\n        render: text => <a href=\"javascript:;\">{text}</a>,\n      },\n      {\n        title: 'Units',\n        dataIndex: 'productUnits',\n        key: 'address',\n      },\n    ]\n\n    const columnstopselling = [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        render: text => <a href=\"javascript:;\">{text}</a>,\n      },\n      {\n        title: 'Tags',\n        key: 'tags',\n        dataIndex: 'tags',\n        render: tags => (\n          <span>\n            {tags.map(tag => {\n              let color = tag[0] == \"-\" ? 'volcano' : 'green';\n              if (tag === 'loser') {\n                color = 'volcano';\n              }\n              return (\n                <Tag color={color} key={tag}>\n                  {tag.toUpperCase()}\n                </Tag>\n              );\n            })}\n          </span>\n        ),\n      },\n\n    ]\n    // \"totalSale\": 832.62,\n    // \"day\": 18,\n    // \"month\": 7,\n    // \"year\": 2019\n    \n\n    const datatopselling = [\n      {\n        key: '1',\n        name: 'Today',\n\n\n        tags: ['+₹20k'],\n      },\n      {\n        key: '2',\n        name: 'Yesterday',\n\n\n        tags: ['+₹15k'],\n      },\n      {\n        key: '3',\n        name: 'Last Week',\n\n\n        tags: ['-₹10k'],\n      },\n    ]\n\n    const columnstopcat = [\n      {\n        title: 'Top Categories',\n        dataIndex: 'name',\n        key: 'name',\n        render: text => <a href=\"javascript:;\">{text}</a>,\n      },\n      {\n        title: 'Units',\n        dataIndex: 'productCategoryCount',\n        key: 'productCategoryCount',\n\n      },\n      // {\n      //     title: 'Tags',\n      //     key: 'tags',\n      //     dataIndex: 'tags',\n      //     render: tags => (\n      //         <span>\n      //         {tags.map(tag => {\n      //             let color = tag[0] == \"-\" ? 'volcano' : 'green';\n      //             if (tag === 'loser') {\n      //             color = 'volcano';\n      //             }\n      //             return (\n      //             <Tag color={color} key={tag}>\n      //                 {tag.toUpperCase()}\n      //             </Tag>\n      //             );\n      //         })}\n      //         </span>\n      //     ),\n      //     },\n\n    ]\n\n\n    let configpayment = {\n      chart: {\n        plotBackgroundColor: null,\n        plotBorderWidth: null,\n        plotShadow: false,\n        type: 'pie'\n      },\n      title: {\n        text: 'Payment Methods'\n      },\n      tooltip: {\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n      },\n      plotOptions: {\n        pie: {\n          allowPointSelect: true,\n          cursor: 'pointer',\n          dataLabels: {\n            enabled: true,\n            format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n            style: {\n              color: 'black'\n            }\n          }\n        }\n      },\n      series: [{\n        name: 'Payment Methods',\n        colorByPoint: true,\n        data: this.state.paymentTypeData\n      }]\n    }\n\n    let configTopSalePerson = {\n      title: {\n        text: 'Top Sales person'\n      },\n\n      subtitle: {\n        text: 'Sales'\n      },\n\n      xAxis: {\n        categories: this.state.topSalesmanData.salesmanName\n      },\n\n      series: [{\n        type: 'column',\n        colorByPoint: true,\n        data: this.state.topSalesmanData.salesValue,\n        showInLegend: false\n      }]\n    }\n\n    let configStoreDivison = {\n      chart: {\n        plotBackgroundColor: null,\n        plotBorderWidth: null,\n        plotShadow: false,\n        type: 'pie'\n      },\n      title: {\n        text: 'Store Wise Divison'\n      },\n      tooltip: {\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n      },\n      plotOptions: {\n        pie: {\n          allowPointSelect: true,\n          cursor: 'pointer',\n          dataLabels: {\n            enabled: true,\n            format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n            style: {\n              color: 'black'\n            }\n          }\n        }\n      },\n      series: [{\n        name: 'Store Wise Division',\n        colorByPoint: true,\n        data: this.state.loacationSalesData\n      }]\n    }\n    return (\n      <div style={{ padding: '30px' }}>\n        <Row gutter={16}>\n          <Col span={8}>\n            {/* <Card title=\"GROSS SALES\" bordered={true}> */}\n            <Table pagination={{ position: \"none\" }} columns={columnstopselling} dataSource={datatopselling} size=\"small\" showHeader={false} title={() => <strong>GROSS SALES</strong>} />\n            {/* </Card> */}\n          </Col>\n          <Col span={8}>\n\n\n            <Table pagination={{ position: \"none\" }} columns={columnstopcat} dataSource={this.state.topCategoryData} size=\"small\" />\n          </Col>\n          <Col span={8}>\n            <Table pagination={{ position: \"none\" }} columns={columns} dataSource={this.state.topProductsData} size=\"small\"  />\n          </Col>\n\n        </Row>\n        <br></br>\n        <Row gutter={16}>\n          <Col span={12}>\n\n            <Card bordered={true}>\n              <ReactHighcharts config={configpayment} ref=\"chart\"></ReactHighcharts>\n            </Card>\n\n          </Col>\n          <Col span={12}>\n\n            <Card bordered={true}>\n              <ReactHighcharts config={configTopSalePerson} ref=\"chart\"></ReactHighcharts>\n            </Card>\n\n          </Col>\n\n        </Row>\n        <br></br>\n        <Row gutter={16}>\n          <Col span={22}>\n            <Card bordered={true}>\n              <ReactHighcharts config={configStoreDivison} ref=\"chart\"></ReactHighcharts>\n            </Card>\n\n          </Col>\n\n        </Row>\n\n      </div>\n    )\n  }\n\n  loadTopItems = () => {\n    this.props.getTopProducts('6e4a829b-b32d-487c-800f-d80a6d185a92', '2018-07-04', '2021-07-06')\n      .then(data => {\n        this.setState({ topProductsData: data.splice(0, 3) })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  loadTopCategory = () => {\n    this.props.topCategories('6e4a829b-b32d-487c-800f-d80a6d185a92', '2018-07-04', '2021-07-06')\n      .then(data => {\n        this.setState({ topCategoryData: data.splice(0, 3) })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  loadTransactionType = () => {\n    this.props.paymentTypes('6e4a829b-b32d-487c-800f-d80a6d185a92', '2018-07-04', '2021-07-06')\n      .then(data => {\n        let dataArray = data.map((item, i) => {\n          return {\n            name: item.name,\n            y: item.paymentTypeCount\n          }\n        })\n        this.setState({ paymentTypeData: dataArray.splice(0, 3) })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  loadTopSalesman = () => {\n    //send businessID\n    this.props.getTopSalesman('e96c8b21-4773-407c-a440-4d4c9d67aa79')\n      .then(data => {\n        let salesValue = []\n        let salesmanName = []\n        for (let index = 0; index < data.length; index++) {\n          salesValue.push(data[index].totalSalesAmount)\n          salesmanName.push(data[index].name)\n        }\n        this.setState({ topSalesmanData: {salesValue: salesValue, salesmanName: salesmanName} })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  loadLocationSales = () => {\n    this.props.getLocationSales('bdf26304-0a68-48d9-a20f-8fb60ca6e4c0')\n      .then(data => {\n        let dataArray = data.map((item, i) => {\n          return {\n            name: item.name,\n            y: item.units\n          }\n        })\n        this.setState({ loacationSalesData: dataArray })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  loadSalesWithinDates = () => {\n    this.props.getSalesDate(this.props.business.response.data[0].businessID)\n      .then(data => {\n        console.log(data, \"hehehhehhehh\")\n        let salesData = []\n        for (let index = 0; index < data.length; index++) {\n            salesData.push({\n              key: index,\n              name: ''+data[index].day+'-'+data[index].month+'-'+data[index].year,\n              tags: data[index].totalSale\n            })\n        }\n        console.log(salesData, \"ho gyaaaa\")\n        // this.setState({ topCategoryData: data.splice(0, 3) })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n}\n\n\n\n// this.props.locations.response.data[2]\nconst mapStateToProps = state => ({\n  locations: state.locations,\n  business: state.businesses\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getTopProducts: (location, from, to) => dispatch(topItems.action(location, from, to)),\n  topCategories: (location, from, to) => dispatch(topCategories.action(location, from, to)),\n  paymentTypes: (location, from, to) => dispatch(paymentTypes.action(location, from, to)),\n  getTopSalesman: (business) => dispatch(topSalesman.action(business)),\n  getLocationSales: (business) => dispatch(locationSales.action(business)),\n  getSalesDate: (business) => dispatch(salesDatewise.action(business))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkRA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AA1RA;AA4RA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AApSA;AAsSA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AApTA;AAsTA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AArUA;AAuUA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AArVA;AAuVA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAvWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAHA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAZA;AAJA;AAuBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AALA;AAQA;AACA;AAGA;AALA;AAQA;AACA;AAGA;AALA;AASA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAHA;AA8BA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAHA;AADA;AAaA;AACA;AACA;AACA;AAHA;AA1BA;AAiCA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAbA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAHA;AADA;AAaA;AACA;AACA;AACA;AAHA;AA1BA;AAgCA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AASA;;;;AAhRA;AACA;AACA;AA6WA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AAAA;AACA;AAQA;;;;A","sourceRoot":""}