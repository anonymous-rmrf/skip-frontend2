{"version":3,"file":"static/webpack/static/development/pages/business-details.js.685ff9b59cd39595c4c8.hot-update.js","sources":["webpack:///./pages/business-details/index.js"],"sourcesContent":["import React from 'react';\nimport Template from '../../src/components/templates/businessDetails';\nconst uuidv4 = require('uuid/v4')\nimport { addBusiness, user, businessType } from '../../src/reduxHelper'\nimport { connect } from 'react-redux';\nimport token from \"../../src/utils/token\"\nimport Router from \"next/router\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  handleFormData = (data) => {\n    data.values.businessID = uuidv4()\n    console.log(data.values, \"hehheh\")\n    // data.values.owner = token.getTokenData().data.user[0].userID\n    // let dispatchData = data.values\n    // this.props.businessSignupDispatch(dispatchData).then(res => {\n    //   console.log(res)\n    //   if(res.affectedRows){\n    //     Router.push(\"/dashboard\")\n    //   }else{\n    //     alert(\"Cannot add business, check console for error\")\n    //   }\n    // }).catch(err => {\n    //   console.log(err)\n    // })\n  }\n\ncomponentDidMount() {\n\n  // load businesstype if not loaded\n  if (!this.props.businesstype.response) { \n    this.props\n      .getBusinessType()\n      .then(data => {})\n      .catch(err => {})\n  }\n}\n\n  render() {\n    if (this.props.businesstype.isLoaded) {\n      return (\n        <div>\n          <Template getFormData={(data) => this.handleFormData(data)} formData={this.createSelectData(\n                this.props.businesstype.response.data\n              )}/>\n        </div>\n      );\n    }else{\n      return <h1>Loading</h1>\n    }\n    \n  }\n\n\n\n\n  createSelectData(data) {\n    let selectData = data.map(item => ({\n      name: item.name,\n      value: item.businesstypeID\n    }))\n    return selectData\n  }\n}\n\n\n\nconst mapStateToProps = state => {\n  return {\n    businessSignup: state.businessSignup,\n    businesstype: state.businessType,\n    user:state.user\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  businessSignupDispatch: (businessSignupData) => dispatch(addBusiness.action(businessSignupData)),\n  getUserDispatch: (userID) => dispatch(user.action(userID)),\n  getBusinessType: () => dispatch(businessType.action())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAEA;AACA;;;AAkBA;AAEA;AACA;AACA;AAIA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;;;AAKA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;;;;AAzDA;AACA;AA6DA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}