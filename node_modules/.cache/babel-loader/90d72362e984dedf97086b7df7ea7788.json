{"ast":null,"code":"import \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { Form, asField } from 'informed';\n// import 'antd/dist/antd.css';\nvar Text_type1 = asField(function (_ref) {\n  var fieldState = _ref.fieldState,\n      fieldApi = _ref.fieldApi,\n      props = _objectWithoutProperties(_ref, [\"fieldState\", \"fieldApi\"]);\n\n  var value = fieldState.value;\n  var setValue = fieldApi.setValue,\n      setTouched = fieldApi.setTouched;\n\n  var _onChange = props.onChange,\n      _onBlur = props.onBlur,\n      initialValue = props.initialValue,\n      forwardedRef = props.forwardedRef,\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"initialValue\", \"forwardedRef\"]);\n\n  return React.createElement(_Input, _extends({}, rest, {\n    ref: forwardedRef,\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n      console.log(value);\n\n      if (_onChange) {\n        _onChange(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      setTouched();\n\n      if (_onBlur) {\n        _onBlur(e);\n      }\n    }\n  }));\n});\nvar Search = _Input.Search;\nexport var Asearch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Asearch, _React$Component);\n\n  function Asearch() {\n    _classCallCheck(this, Asearch);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Asearch).apply(this, arguments));\n  }\n\n  _createClass(Asearch, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, React.createElement(Search, {\n        placeholder: this.props.placeholder,\n        style: {\n          width: 360\n        },\n        onSearch: function onSearch(value) {\n          return console.log(value);\n        },\n        enterButton: true\n      }));\n    }\n  }]);\n\n  return Asearch;\n}(React.Component); //  Not required we gonna use from .... bootstrap\n\nvar RG = _Radio.Group;\nvar R = asField(function (_ref2) {\n  var fieldState = _ref2.fieldState,\n      fieldApi = _ref2.fieldApi,\n      props = _objectWithoutProperties(_ref2, [\"fieldState\", \"fieldApi\"]);\n\n  var value = fieldState.value;\n  var setValue = fieldApi.setValue,\n      setTouched = fieldApi.setTouched;\n\n  var _onChange2 = props.onChange,\n      _onBlur2 = props.onBlur,\n      initialValue = props.initialValue,\n      forwardedRef = props.forwardedRef,\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"initialValue\", \"forwardedRef\"]);\n\n  return React.createElement(_Radio, _extends({\n    type: \"radio\"\n  }, rest, {\n    ref: forwardedRef,\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n      console.log(value);\n\n      if (_onChange2) {\n        _onChange2(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      setTouched();\n\n      if (_onBlur2) {\n        _onBlur2(e);\n      }\n    }\n  }));\n}); //  Not required we gonna use from .... bootstrap\n\nvar Check = asField(function (_ref3) {\n  var fieldState = _ref3.fieldState,\n      fieldApi = _ref3.fieldApi,\n      props = _objectWithoutProperties(_ref3, [\"fieldState\", \"fieldApi\"]);\n\n  var value = fieldState.value;\n  var setValue = fieldApi.setValue,\n      setTouched = fieldApi.setTouched;\n  props.field = props.name;\n\n  var _onChange3 = props.onChange,\n      _onBlur3 = props.onBlur,\n      initialValue = props.initialValue,\n      forwardedRef = props.forwardedRef,\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"initialValue\", \"forwardedRef\"]);\n\n  return React.createElement(_Checkbox, _extends({}, rest, {\n    ref: forwardedRef,\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n      console.log(\"checked = \".concat(e.target.checked));\n\n      if (_onChange3) {\n        _onChange3(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      setTouched();\n\n      if (_onBlur3) {\n        _onBlur3(e);\n      }\n    }\n  }));\n});\nvar TextArea = _Input.TextArea;\nvar Tarea = asField(function (_ref4) {\n  var fieldState = _ref4.fieldState,\n      fieldApi = _ref4.fieldApi,\n      props = _objectWithoutProperties(_ref4, [\"fieldState\", \"fieldApi\"]);\n\n  var value = fieldState.value;\n  var setValue = fieldApi.setValue,\n      setTouched = fieldApi.setTouched;\n\n  var _onChange4 = props.onChange,\n      _onBlur4 = props.onBlur,\n      initialValue = props.initialValue,\n      forwardedRef = props.forwardedRef,\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"initialValue\", \"forwardedRef\"]);\n\n  return React.createElement(TextArea, _extends({}, rest, {\n    ref: forwardedRef,\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n      console.log(value);\n\n      if (_onChange4) {\n        _onChange4(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      setTouched();\n\n      if (_onBlur4) {\n        _onBlur4(e);\n      }\n    }\n  }));\n});\nvar O = _Select.Option;\nvar Sel = asField(function (_ref5) {\n  var fieldState = _ref5.fieldState,\n      fieldApi = _ref5.fieldApi,\n      props = _objectWithoutProperties(_ref5, [\"fieldState\", \"fieldApi\"]);\n\n  var value = fieldState.value;\n  var setValue = fieldApi.setValue,\n      setTouched = fieldApi.setTouched;\n\n  var _onChange5 = props.onChange,\n      _onBlur5 = props.onBlur,\n      initialValue = props.initialValue,\n      forwardedRef = props.forwardedRef,\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"initialValue\", \"forwardedRef\"]);\n\n  return React.createElement(_Select, _extends({}, rest, {\n    ref: forwardedRef,\n    onChange: function onChange(e) {\n      if (_onChange5) {\n        _onChange5(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      setTouched();\n\n      if (_onBlur5) {\n        _onBlur5(e);\n      }\n    }\n  }));\n});\nexport { Form, Text_type1, Check, Tarea, Sel, O, R, RG };","map":null,"metadata":{},"sourceType":"module"}